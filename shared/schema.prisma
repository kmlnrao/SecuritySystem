// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userRoles   UserRole[]
  permissions Permission[]

  @@map("users")
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  userRoles   UserRole[]
  permissions Permission[]

  @@map("roles")
}

model UserRole {
  userId String @map("user_id")
  roleId String @map("role_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Module {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  moduleDocuments ModuleDocument[]

  @@map("modules")
}

model Document {
  id   String @id @default(uuid())
  name String
  path String

  // Relations
  moduleDocuments ModuleDocument[]
  permissions     Permission[]

  @@map("documents")
}

model ModuleDocument {
  id         String @id @default(uuid())
  moduleId   String @map("module_id")
  documentId String @map("document_id")

  // Relations
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([moduleId, documentId])
  @@map("module_documents")
}

model Permission {
  id         String  @id @default(uuid())
  userId     String? @map("user_id")
  roleId     String? @map("role_id")
  documentId String  @map("document_id")
  canAdd     Boolean @default(false) @map("can_add")
  canModify  Boolean @default(false) @map("can_modify")
  canDelete  Boolean @default(false) @map("can_delete")
  canQuery   Boolean @default(false) @map("can_query")

  // Relations
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("permissions")
}